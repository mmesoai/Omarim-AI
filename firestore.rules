
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under /users/{userId},
 * and users can only read and write data they own. The rule prioritizes simplicity and security.
 * Data shape validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including leads, products, outreach sequences,
 * emails, and stores. This ensures clear ownership and prevents unauthorized access.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Default security posture is strict owner-only access unless otherwise specified.
 * - Denormalization is used to avoid costly `get()` calls within rules, improving performance
 *   and preventing potential rule execution failures.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the /users collection.  Users can create and manage their own profile.
     * @path /users/{userId}
     * @allow (create, update) - Authenticated user can create or update their own profile. This is critical for Google Sign-In to save user details.
     * @allow (get) - Authenticated user can get their own profile.
     * @deny (list, delete) - Listing or deleting user profiles is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow create, update: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list, delete: if false;
    }

    /**
     * @description Rule for the /users/{userId}/leads collection.  Users can only access leads they own.
     * @path /users/{userId}/leads/{leadId}
     * @allow (read, write) - Authenticated user can fully manage their own leads.
     * @principle Enforces user-ownership for lead data.
     */
    match /users/{userId}/leads/{leadId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/products collection.  Users can only access products they own.
     * @path /users/{userId}/products/{productId}
     * @allow (read, write) - Authenticated user can fully manage their own products.
     * @principle Enforces user-ownership for product data.
     */
    match /users/{userId}/products/{productId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/outreachSequences collection.  Users can only access outreach sequences they own.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}
     * @allow (read, write) - Authenticated user can fully manage their own outreach sequences.
     * @principle Enforces user-ownership for outreach sequence data.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/integrations collection.  Users can only access integrations they own.
     * @path /users/{userId}/integrations/{integrationId}
     * @allow (read, write) - Authenticated user can manage their own integration credentials.
     * @principle Enforces strict user-ownership for sensitive API keys and credentials.
     */
    match /users/{userId}/integrations/{integrationId} {
        allow read, write: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to check if the sign-in provider is Google.
  function isSigningInWithGoogle() {
    return request.auth.token.firebase.sign_in_provider == 'google.com';
  }
}
