/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              allowing users to only access and modify data they explicitly own.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/leads/{leadId}: Leads owned by a specific user.
 * - /users/{userId}/products/{productId}: Products owned by a specific user.
 * - /users/{userId}/outreachSequences/{outreachSequenceId}: Outreach sequences created by a user.
 * - /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId}: Emails within an outreach sequence owned by a user.
 * - /users/{userId}/stores/{storeId}: Stores connected by a user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user document.
 * - Users can only manage leads, products, outreach sequences, emails, and stores under their own user ID.
 * - Listing of user documents is disallowed to protect user privacy.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *          Request data must have id == user123
     * @allow (get) - User with ID 'user123' can read their own profile.
     * @allow (update) - User with ID 'user123' can update their own profile.
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     * @deny (create) - User with ID 'user123' cannot create a profile with a different ID 'user456'.
     * @deny (get) - User with ID 'user123' cannot read another user's profile 'user456'.
     * @deny (update) - User with ID 'user123' cannot update another user's profile 'user456'.
     * @deny (delete) - User with ID 'user123' cannot delete another user's profile 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.firstName is string && request.resource.data.lastName is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to leads owned by a user.
     * @path /users/{userId}/leads/{leadId}
     * @allow (create) - User 'user123' can create a lead under their ID.
     * @allow (get) - User 'user123' can read a lead under their ID.
     * @allow (list) - User 'user123' can list leads under their ID.
     * @allow (update) - User 'user123' can update a lead under their ID.
     * @allow (delete) - User 'user123' can delete a lead under their ID.
     * @deny (create) - User 'user123' cannot create a lead under another user's ID 'user456'.
     * @deny (get) - User 'user123' cannot read a lead under another user's ID 'user456'.
     * @deny (list) - User 'user123' cannot list leads under another user's ID 'user456'.
     * @deny (update) - User 'user123' cannot update a lead under another user's ID 'user456'.
     * @deny (delete) - User 'user123' cannot delete a lead under another user's ID 'user456'.
     * @principle Enforces document ownership for all operations on leads.
     */
    match /users/{userId}/leads/{leadId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.firstName is string && request.resource.data.lastName is string && request.resource.data.company is string && request.resource.data.domain is string && request.resource.data.status is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to products owned by a user.
     * @path /users/{userId}/products/{productId}
     * @allow (create) - User 'user123' can create a product under their ID.
     * @allow (get) - User 'user123' can read a product under their ID.
     * @allow (list) - User 'user123' can list products under their ID.
     * @allow (update) - User 'user123' can update a product under their ID.
     * @allow (delete) - User 'user123' can delete a product under their ID.
     * @deny (create) - User 'user123' cannot create a product under another user's ID 'user456'.
     * @deny (get) - User 'user123' cannot read a product under another user's ID 'user456'.
     * @deny (list) - User 'user123' cannot list products under another user's ID 'user456'.
     * @deny (update) - User 'user123' cannot update a product under another user's ID 'user456'.
     * @deny (delete) - User 'user123' cannot delete a product under another user's ID 'user456'.
     * @principle Enforces document ownership for all operations on products.
     */
    match /users/{userId}/products/{productId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.name is string && request.resource.data.description is string && request.resource.data.price is number && request.resource.data.quantity is number && request.resource.data.imageId is string && request.resource.data.source is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to outreach sequences created by a user.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}
     * @allow (create) - User 'user123' can create an outreach sequence under their ID.
     * @allow (get) - User 'user123' can read an outreach sequence under their ID.
     * @allow (list) - User 'user123' can list outreach sequences under their ID.
     * @allow (update) - User 'user123' can update an outreach sequence under their ID.
     * @allow (delete) - User 'user123' can delete an outreach sequence under their ID.
     * @deny (create) - User 'user123' cannot create an outreach sequence under another user's ID 'user456'.
     * @deny (get) - User 'user123' cannot read an outreach sequence under another user's ID 'user456'.
     * @deny (list) - User 'user123' cannot list outreach sequences under another user's ID 'user456'.
     * @deny (update) - User 'user123' cannot update an outreach sequence under another user's ID 'user456'.
     * @deny (delete) - User 'user123' cannot delete an outreach sequence under another user's ID 'user456'.
     * @principle Enforces document ownership for all operations on outreach sequences.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.name is string && request.resource.data.description is string && request.resource.data.leadIds is list;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to emails associated with a user's outreach sequence.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId}
     * @allow (create) - User 'user123' can create an email under their outreach sequence.
     * @allow (get) - User 'user123' can read an email under their outreach sequence.
     * @allow (list) - User 'user123' can list emails under their outreach sequence.
     * @allow (update) - User 'user123' can update an email under their outreach sequence.
     * @allow (delete) - User 'user123' can delete an email under their outreach sequence.
     * @deny (create) - User 'user123' cannot create an email under another user's ID 'user456'.
     * @deny (get) - User 'user123' cannot read an email under another user's ID 'user456'.
     * @deny (list) - User 'user123' cannot list emails under another user's ID 'user456'.
     * @deny (update) - User 'user123' cannot update an email under another user's ID 'user456'.
     * @deny (delete) - User 'user123' cannot delete an email under another user's ID 'user456'.
     * @principle Enforces document ownership for all operations on emails within outreach sequences.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.outreachSequenceId is string && request.resource.data.leadId is string && request.resource.data.subject is string && request.resource.data.body is string && request.resource.data.sentAt is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to stores integrated by a user.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) - User 'user123' can create a store under their ID.
     * @allow (get) - User 'user123' can read a store under their ID.
     * @allow (list) - User 'user123' can list stores under their ID.
     * @allow (update) - User 'user123' can update a store under their ID.
     * @allow (delete) - User 'user123' can delete a store under their ID.
     * @deny (create) - User 'user123' cannot create a store under another user's ID 'user456'.
     * @deny (get) - User 'user123' cannot read a store under another user's ID 'user456'.
     * @deny (list) - User 'user123' cannot list stores under another user's ID 'user456'.
     * @deny (update) - User 'user123' cannot update a store under another user's ID 'user456'.
     * @deny (delete) - User 'user123' cannot delete a store under another user's ID 'user456'.
     * @principle Enforces document ownership for all operations on stores.
     */
    match /users/{userId}/stores/{storeId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.name is string && request.resource.data.type is string && request.resource.data.apiUrl is string && request.resource.data.apiKey is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}