
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under /users/{userId},
 * and users can only read and write data they own. The rule prioritizes simplicity and security.
 * Data shape validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including leads, products, outreach sequences,
 * emails, and stores. This ensures clear ownership and prevents unauthorized access.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Default security posture is strict owner-only access unless otherwise specified.
 * - Denormalization is used to avoid costly `get()` calls within rules, improving performance
 *   and preventing potential rule execution failures.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the /users collection.  Users can only create their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with ID matching the document ID can create their profile.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (create) - Authenticated user with ID not matching the document ID cannot create a profile.
     * @allow (get) - Authenticated user can get their own profile.
     * @deny (get) - Unauthenticated user cannot get a profile.
     * @allow (list) - Deny user listing.
     * @deny (update) - Users cannot update the profile after creation
     * @deny (delete) - Users cannot delete the profile after creation
     * @principle Enforces user-ownership for profile creation.  Disallows unauthorized profile access or modification.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && (isOwner(userId) || isSigningInWithGoogle());
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rule for the /users/{userId}/leads collection.  Users can only access leads they own.
     * @path /users/{userId}/leads/{leadId}
     * @allow (create) - Authenticated user can create a lead under their profile.
     * @deny (create) - Unauthenticated user cannot create a lead.
     * @deny (create) - Authenticated user creating a lead under another user's profile.
     * @allow (get) - Authenticated user can get a lead under their profile.
     * @deny (get) - Unauthenticated user cannot get a lead.
     * @deny (get) - Authenticated user getting a lead under another user's profile.
     * @allow (list) - Authenticated user can list leads under their profile.
     * @deny (list) - Unauthenticated user cannot list leads.
     * @deny (list) - Authenticated user listing leads under another user's profile.
     * @allow (update) - Authenticated user can update a lead under their profile.
     * @deny (update) - Unauthenticated user cannot update a lead.
     * @deny (update) - Authenticated user updating a lead under another user's profile.
     * @allow (delete) - Authenticated user can delete a lead under their profile.
     * @deny (delete) - Unauthenticated user cannot delete a lead.
     * @deny (delete) - Authenticated user deleting a lead under another user's profile.
     * @principle Enforces user-ownership for lead data.  Disallows unauthorized lead access or modification.
     */
    match /users/{userId}/leads/{leadId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId}/products collection.  Users can only access products they own.
     * @path /users/{userId}/products/{productId}
     * @allow (create) - Authenticated user can create a product under their profile.
     * @deny (create) - Unauthenticated user cannot create a product.
     * @deny (create) - Authenticated user creating a product under another user's profile.
     * @allow (get) - Authenticated user can get a product under their profile.
     * @deny (get) - Unauthenticated user cannot get a product.
     * @deny (get) - Authenticated user getting a product under another user's profile.
     * @allow (list) - Authenticated user can list products under their profile.
     * @deny (list) - Unauthenticated user cannot list products.
     * @deny (list) - Authenticated user listing products under another user's profile.
     * @allow (update) - Authenticated user can update a product under their profile.
     * @deny (update) - Unauthenticated user cannot update a product.
     * @deny (update) - Authenticated user updating a product under another user's profile.
     * @allow (delete) - Authenticated user can delete a product under their profile.
     * @deny (delete) - Unauthenticated user cannot delete a product.
     * @deny (delete) - Authenticated user deleting a product under another user's profile.
     * @principle Enforces user-ownership for product data.  Disallows unauthorized product access or modification.
     */
    match /users/{userId}/products/{productId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId}/outreachSequences collection.  Users can only access outreach sequences they own.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}
     * @allow (create) - Authenticated user can create an outreach sequence under their profile.
     * @deny (create) - Unauthenticated user cannot create an outreach sequence.
     * @deny (create) - Authenticated user creating an outreach sequence under another user's profile.
     * @allow (get) - Authenticated user can get an outreach sequence under their profile.
     * @deny (get) - Unauthenticated user cannot get an outreach sequence.
     * @deny (get) - Authenticated user getting an outreach sequence under another user's profile.
     * @allow (list) - Authenticated user can list outreach sequences under their profile.
     * @deny (list) - Unauthenticated user cannot list outreach sequences.
     * @deny (list) - Authenticated user listing outreach sequences under another user's profile.
     * @allow (update) - Authenticated user can update an outreach sequence under their profile.
     * @deny (update) - Unauthenticated user cannot update an outreach sequence.
     * @deny (update) - Authenticated user updating an outreach sequence under another user's profile.
     * @allow (delete) - Authenticated user can delete an outreach sequence under their profile.
     * @deny (delete) - Unauthenticated user cannot delete an outreach sequence.
     * @deny (delete) - Authenticated user deleting an outreach sequence under another user's profile.
     * @principle Enforces user-ownership for outreach sequence data.  Disallows unauthorized access or modification.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId}/integrations collection.  Users can only access integrations they own.
     * @path /users/{userId}/integrations/{integrationId}
     * @allow (read, write) - Authenticated user can manage their own integration credentials.
     * @principle Enforces strict user-ownership for sensitive API keys and credentials.
     */
    match /users/{userId}/integrations/{integrationId} {
        allow read, write: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to check if the sign-in provider is Google.
  function isSigningInWithGoogle() {
    return request.auth.token.firebase.sign_in_provider == 'google.com';
  }
}
