/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under
 * /users/{userId}, and users can only access their own data.  The rules prioritize
 * security and data privacy, with a focus on preventing unauthorized access and
 * modification. Schema validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * All user-specific data is nested under the /users/{userId} collection.
 * This includes leads, products, outreach sequences, emails, and stores.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing other users' data is strictly forbidden.
 * - The rules explicitly deny any ambiguous or potentially insecure operations.
 *
 * Denormalization for Authorization:
 *  - The 'userId' is encoded in the path for user-owned resources.  Rules use
 *    this path information directly via `isOwner(userId)` to avoid costly `get()`
 *    operations.
 *
 * Structural Segregation:
 *  - The application does not mix public and private data within the same
 *    collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - A user can get their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/leads/{leadId} collection.
     * @path /databases/{database}/documents/users/{userId}/leads/{leadId}
     * @allow (create) - A user can create a lead under their own user ID.
     * @allow (get, list) - A user can get and list leads under their own user ID.
     * @deny (create) - A user cannot create a lead under another user's ID.
     * @deny (update, delete) - A user cannot update or delete leads under another user's ID.
     * @principle Enforces user-ownership for leads.
     */
    match /users/{userId}/leads/{leadId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/products/{productId} collection.
     * @path /databases/{database}/documents/users/{userId}/products/{productId}
     * @allow (create) - A user can create a product under their own user ID.
     * @allow (get, list) - A user can get and list products under their own user ID.
     * @deny (create) - A user cannot create a product under another user's ID.
     * @deny (update, delete) - A user cannot update or delete products under another user's ID.
     * @principle Enforces user-ownership for products.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/outreachSequences/{outreachSequenceId} collection.
     * @path /databases/{database}/documents/users/{userId}/outreachSequences/{outreachSequenceId}
     * @allow (create) - A user can create an outreach sequence under their own user ID.
     * @allow (get, list) - A user can get and list outreach sequences under their own user ID.
     * @deny (create) - A user cannot create an outreach sequence under another user's ID.
     * @deny (update, delete) - A user cannot update or delete outreach sequences under another user's ID.
     * @principle Enforces user-ownership for outreach sequences.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId} collection.
     * @path /databases/{database}/documents/users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId}
     * @allow (create) - A user can create an email under their own outreach sequence.
     * @allow (get, list) - A user can get and list emails under their own outreach sequence.
     * @deny (create) - A user cannot create an email under another user's outreach sequence.
     * @deny (update, delete) - A user cannot update or delete emails under another user's outreach sequence.
     * @principle Enforces user-ownership for emails within outreach sequences.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/stores/{storeId} collection.
     * @path /databases/{database}/documents/users/{userId}/stores/{storeId}
     * @allow (create) - A user can create a store under their own user ID.
     * @allow (get, list) - A user can get and list stores under their own user ID.
     * @deny (create) - A user cannot create a store under another user's ID.
     * @deny (update, delete) - A user cannot update or delete stores under another user's ID.
     * @principle Enforces user-ownership for stores.
     */
    match /users/{userId}/stores/{storeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}