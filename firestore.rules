rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their profile if request.auth.uid == userId
     * @allow (get, update, delete) - Authenticated user 'user_abc' can read, update, or delete their profile if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile for 'user_abc' if request.auth.uid != userId
     * @deny (get, update, delete) - Authenticated user 'user_xyz' cannot read, update, or delete 'user_abc' profile if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure leads collection, allowing only the owner to manage their own leads.
     * @path /users/{userId}/leads/{leadId}
     * @allow (create) - Authenticated user 'user_abc' can create a lead under their ID if request.auth.uid == userId
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete leads under their ID if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create a lead under 'user_abc' ID if request.auth.uid != userId
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete leads under 'user_abc' ID if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure products collection, allowing only the owner to manage their own products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) - Authenticated user 'user_abc' can create a product under their ID if request.auth.uid == userId
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete products under their ID if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create a product under 'user_abc' ID if request.auth.uid != userId
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete products under 'user_abc' ID if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure outreach sequences collection, allowing only the owner to manage their own sequences.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}
     * @allow (create) - Authenticated user 'user_abc' can create an outreach sequence under their ID if request.auth.uid == userId
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete outreach sequences under their ID if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create an outreach sequence under 'user_abc' ID if request.auth.uid != userId
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete outreach sequences under 'user_abc' ID if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure emails collection, allowing only the owner to manage emails within their outreach sequences.
     * @path /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId}
     * @allow (create) - Authenticated user 'user_abc' can create an email under their outreach sequence if request.auth.uid == userId
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete emails under their outreach sequence if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create an email under 'user_abc' outreach sequence if request.auth.uid != userId
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete emails under 'user_abc' outreach sequence if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/outreachSequences/{outreachSequenceId}/emails/{emailId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure stores collection, allowing only the owner to manage their own stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) - Authenticated user 'user_abc' can create a store under their ID if request.auth.uid == userId
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, list, update, or delete stores under their ID if request.auth.uid == userId
     * @deny (create) - Authenticated user 'user_xyz' cannot create a store under 'user_abc' ID if request.auth.uid != userId
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, list, update, or delete stores under 'user_abc' ID if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stores/{storeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}